name: Deploy Infrastructure and App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_CERT: ${{ secrets.CLOUDFLARE_CERT }}
      CLOUDFLARE_KEY: ${{ secrets.CLOUDFLARE_KEY }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 4: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      # Step 5: Store EC2 Public IP  
      - name: Store EC2 Public IP
        run:  |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=${EC2_PUBLIC_IP}" >> $GITHUB_ENV
        working-directory: ./terraform

      # Step 6: Create SSH Key file
      - name: Create SSH key file
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/thgkey.pem

       # Step 7: SSH into EC2, deploy Docker, and copy Cloudflare Certs
      - name: SSH into EC2, deploy Docker, and copy Cloudflare certs
        run: |
          chmod 600 ~/thgkey.pem

          # Copy docker-compose.yaml to the EC2 instance
          scp -i ~/thgkey.pem -o StrictHostKeyChecking=no ./docker-compose.yaml ubuntu@$EC2_PUBLIC_IP:/opt/privatebin/docker-compose.yaml

          # Copy nginx_ssl.sh script to the EC2 instance
          scp -i ~/thgkey.pem -o StrictHostKeyChecking=no ./nginx_ssl.sh ubuntu@$EC2_PUBLIC_IP:/home/ubuntu/nginx_ssl.sh

          ssh -i ~/thgkey.pem -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP << EOF
            sudo mkdir /etc/ssl/cloudflare
          # Create Cloudflare cert files
            echo "${{ secrets.CLOUDFLARE_CERT }}" | sudo tee /etc/ssl/cloudflare/cert.pem > /dev/null
            echo "${{ secrets.CLOUDFLARE_KEY }}" | sudo tee /etc/ssl/cloudflare/key.pem > /dev/null
            
          # Set correct permissions
            sudo chmod 600 /etc/ssl/cloudflare/cert.pem /etc/ssl/cloudflare/key.pem
            
          # Give execute permissions to the script and run it
            chmod +x /home/ubuntu/nginx_ssl.sh
            sudo /home/ubuntu/nginx_ssl.sh

          # Run Docker Compose
            cd /opt/privatebin
            docker-compose up -d
            exit
          EOF
