name: Deploy Infrastructure and App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 4: Terraform Apply (create resources)
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      # Step 5: Fetch EC2 Public IP
      - name: Fetch EC2 Public IP
        id: ec2_ip
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "::set-output name=ec2_public_ip::${EC2_PUBLIC_IP}"

      # Step 6: Create SSH Key file
      - name: Create SSH key file
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/thgbin.pem

      # Step 7: Copy docker-compose.yaml to EC2 instance
      - name: Copy docker-compose.yaml to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/thgbin.pem docker-compose.yaml ubuntu@${{ steps.ec2_ip.outputs.ec2_public_ip }}:/home/ubuntu/docker-compose.yaml

      # Step 8: SSH into EC2 and Deploy Application using Docker Compose
      - name: SSH into EC2 and Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/thgbin.pem ubuntu@${{ steps.ec2_ip.outputs.ec2_public_ip }} << 'EOF'
            sudo apt-get update -y
            sudo apt-get install -y docker.io docker-compose
            cd /home/ubuntu
            sudo docker-compose up -d
          EOF

  # Separate Job: Destroy Resources
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() # Ensure this runs even if previous steps fail

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Destroy Infrastructure
      - name: Terraform Destroy
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./terraform
