name: Deploy Infrastructure and App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 4: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Store EC2 Public IP
        run:  |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=${EC2_PUBLIC_IP}" >> $GITHUB_ENV
        working-directory: ./terraform

      # Step 6: Create SSH Key file
      - name: Create SSH key file
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/thgkey.pem

      # Step 7: SSH into EC2, Install Dependencies, Configure SSL
      - name: SSH into EC2 and set up SSL
        run: |
          chmod 600 ~/thgkey.pem
          
          ssh -i ~/thgkey.pem -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP << 'EOF'
            # Install dependencies
            sudo apt update
            sudo apt install -y nginx docker-compose

            # Set up Nginx Reverse Proxy
            sudo tee /etc/nginx/sites-available/privatebin <<EOL
            server {
                listen 80;
                server_name app.thgbin.co.uk;

                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            EOL

            sudo ln -s /etc/nginx/sites-available/privatebin /etc/nginx/sites-enabled/
            sudo systemctl restart nginx

            # Install Cloudflare Origin SSL Certificate (if using Cloudflare proxy)
            sudo mkdir -p /etc/ssl/cloudflare
            echo "${{ secrets.CLOUDFLARE_CERT }}" | sudo tee /etc/ssl/cloudflare/cert.pem > /dev/null
            echo "${{ secrets.CLOUDFLARE_KEY }}" | sudo tee /etc/ssl/cloudflare/key.pem > /dev/null

            # Configure Nginx for HTTPS
            sudo tee /etc/nginx/sites-available/privatebin_ssl <<EOL
            server {
                listen 443 ssl;
                server_name app.thgbin.co.uk;

                ssl_certificate /etc/ssl/cloudflare/cert.pem;
                ssl_certificate_key /etc/ssl/cloudflare/key.pem;

                location / {
                    proxy_pass http://127.0.0.1:8080;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            
            server {
                listen 80;
                server_name app.thgbin.co.uk;
                return 301 https://\$host\$request_uri;
            }
            EOL

            sudo ln -s /etc/nginx/sites-available/privatebin_ssl /etc/nginx/sites-enabled/
            sudo systemctl restart nginx
          EOF

      # Step 8: Deploy Docker App on EC2
      - name: SSH into EC2 and deploy docker-compose.yaml
        run: |
          scp -i ~/thgkey.pem -o StrictHostKeyChecking=no ./docker-compose.yaml ubuntu@$EC2_PUBLIC_IP:/opt/privatebin/docker-compose.yaml

          ssh -i ~/thgkey.pem -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP << EOF
            cd /opt/privatebin
            docker-compose up -d
            exit
          EOF

  # Separate Job: Destroy Resources
  # cleanup:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   if: always() # Ensure this runs even if previous steps fail

  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}

  #   steps:
  #     # Step 1: Check out the code
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     # Step 2: Set up Terraform
  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.5.0

  #     # Step 3: Destroy Infrastructure
  #     - name: Terraform Destroy
  #       run: |
  #         terraform init
  #         terraform destroy -auto-approve
  #       working-directory: ./terraform
