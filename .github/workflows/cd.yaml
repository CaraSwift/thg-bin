name: Deploy Infrastructure and App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 4: Terraform Apply (create resources)
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      # Step 5: Fetch EC2 Public IP
      - name: Fetch EC2 Public IP
        run: |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # Step 6: Deploy App on EC2
      - name: Deploy App on EC2
        run: |
          # Ensure the key file has the correct permissions (if it's not already set)
          chmod 600 /path/to/your/ssh/key/thgbin.pem

          # SSH into EC2 and deploy Docker Compose
          scp -o StrictHostKeyChecking=no -i /path/to/your/ssh/key/thgbin.pem docker-compose.yaml ubuntu@$EC2_PUBLIC_IP:/home/ubuntu/

          # SSH into the EC2 instance and run Docker Compose
          ssh -o StrictHostKeyChecking=no -i /path/to/your/ssh/key/thgbin.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
            # Navigate to the directory where docker-compose.yaml was copied
            cd /home/ubuntu/

            # Start Docker Compose (this will use the existing docker-compose.yaml file)
            docker-compose up -d
          EOF
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        shell: bash

  # Separate Job: Destroy Resources
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() # Ensure this runs even if previous steps fail

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Destroy Infrastructure
      - name: Terraform Destroy
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./terraform
