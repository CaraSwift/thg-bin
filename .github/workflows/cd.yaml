name: Deploy Infrastructure and App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Step 3: Terraform Init
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 4: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Store EC2 Public IP
        run:  |
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_PUBLIC_IP=${EC2_PUBLIC_IP}" >> $GITHUB_ENV
        working-directory: ./terraform

      # Step 6: Create SSH Key file
      - name: Create SSH key file
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/thgkey.pem

      - name: SSH into EC2 and deploy docker-compose.yaml
        run: |
          chmod 600 ~/thgkey.pem
          for i in {1..5}; do
            ssh -tt -i ~/thgkey.pem -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP << EOF
              docker --version
            EOF
            if [ $? -eq 0 ]; then
              echo "SSH connection successful!"
              break
            else
              echo "SSH connection failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done
        shell: bash

  # Separate Job: Destroy Resources
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() # Ensure this runs even if previous steps fail

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 3: Destroy Infrastructure
      - name: Terraform Destroy
        run: |
          terraform init
          terraform destroy -auto-approve
        working-directory: ./terraform
